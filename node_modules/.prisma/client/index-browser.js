
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.1.1
 * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
 */
Prisma.prismaVersion = {
  client: "4.1.1",
  engine: "8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ContactoScalarFieldEnum = makeEnum({
  fk_usuario: 'fk_usuario',
  numero: 'numero'
});

exports.Prisma.DepartamentoScalarFieldEnum = makeEnum({
  pk_departamento: 'pk_departamento',
  nome: 'nome'
});

exports.Prisma.EdificioScalarFieldEnum = makeEnum({
  pk_edificio: 'pk_edificio',
  nome: 'nome'
});

exports.Prisma.FuncaoScalarFieldEnum = makeEnum({
  pk_funcao: 'pk_funcao',
  nome: 'nome',
  fk_departamento: 'fk_departamento'
});

exports.Prisma.ParticipanteScalarFieldEnum = makeEnum({
  fk_usuario: 'fk_usuario',
  fk_reuniao: 'fk_reuniao'
});

exports.Prisma.Prioridade_reuniaoScalarFieldEnum = makeEnum({
  pk_prioridade: 'pk_prioridade',
  descricao: 'descricao'
});

exports.Prisma.ReuniaoScalarFieldEnum = makeEnum({
  pk_reuniao: 'pk_reuniao',
  title: 'title',
  duracao: 'duracao',
  date_realizacao: 'date_realizacao',
  tempo_inicio: 'tempo_inicio',
  tempo_final: 'tempo_final',
  estado_reuniao: 'estado_reuniao',
  fk_prioridade: 'fk_prioridade'
});

exports.Prisma.SalaScalarFieldEnum = makeEnum({
  pk_sala: 'pk_sala',
  fk_edificio: 'fk_edificio',
  piso: 'piso',
  nome: 'nome'
});

exports.Prisma.UsuarioScalarFieldEnum = makeEnum({
  pk_usuario: 'pk_usuario',
  email: 'email',
  name: 'name',
  password: 'password',
  fk_funcao: 'fk_funcao',
  perfil: 'perfil'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.contactoOrderByRelevanceFieldEnum = makeEnum({
  numero: 'numero'
});

exports.Prisma.departamentoOrderByRelevanceFieldEnum = makeEnum({
  nome: 'nome'
});

exports.Prisma.edificioOrderByRelevanceFieldEnum = makeEnum({
  nome: 'nome'
});

exports.Prisma.funcaoOrderByRelevanceFieldEnum = makeEnum({
  nome: 'nome'
});

exports.Prisma.prioridade_reuniaoOrderByRelevanceFieldEnum = makeEnum({
  descricao: 'descricao'
});

exports.Prisma.reuniaoOrderByRelevanceFieldEnum = makeEnum({
  title: 'title',
  duracao: 'duracao'
});

exports.Prisma.salaOrderByRelevanceFieldEnum = makeEnum({
  piso: 'piso',
  nome: 'nome'
});

exports.Prisma.usuarioOrderByRelevanceFieldEnum = makeEnum({
  email: 'email',
  name: 'name',
  password: 'password'
});
exports.estado_reuniao = makeEnum({
  APROVADO: 'APROVADO',
  ESPERA: 'ESPERA',
  REJEITADO: 'REJEITADO'
});

exports.Perfil = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  contacto: 'contacto',
  departamento: 'departamento',
  edificio: 'edificio',
  funcao: 'funcao',
  participante: 'participante',
  prioridade_reuniao: 'prioridade_reuniao',
  reuniao: 'reuniao',
  sala: 'sala',
  usuario: 'usuario'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
